class Pribor {
  turn = false; 

  constructor(name,power) {
    this.name = name;
    this.power = power;
    console.log( `Создан прибор ${name}, мощность: ${power}` );
  }

}

let lump = new Pribor('lump',20);
let comp = new Pribor('comuter',500)

lump.illumination = 200;
lump.turn = false;

comp.vCard = 'nVidea';
comp.turn = true;

priborCollection = [lump,comp];

netPover = 0; //напряжение сети
function netPoverCheck(mas) {
for( let i=0 ;i<2; i++){
  if (mas[i].turn) {
    console.log(mas[i].name + ' включен')
    netPover = netPover + mas[i].power
    
  }else {
    console.log(mas[i].name + ' выключен')
  }
  
 }
console.log('Потребление энергии в сети = '+netPover+ ' W')
}
netPoverCheck(priborCollection);

console.log(lump);
console.log(comp);

// Здесь такая же проблема с наследованием, как и в предыдущем задании. Лампа и компьютер должны быть отдельными классами, которые наследуют от класса Pribor. 
// У класса Pribor также отсутствуют методы, которые включают/выключают прибор (в предыдущем задании они были)
// Кроме того, не совсем верно писать turn = false вне конструктора класса. Лучше стараться придерживаться правила, что все свойства объекта задаются в конструкторе (функция constructor), а вне конструктора располагаются методы.
// Ниже верный вариант решения:

class ElectricalAppliance {
  constructor(name, power){
    this.name = name;
    this.power = power;
    this.isPlugged = false;
  }
  // метод, который определяет прибор как включенный в розетку
  plugIn() {
    console.log(this.name + " is plugged!");
    this.isPlugged = true;
  }
  
  // метод, который определяет прибор как выключеный из розетки
  unplug() {
    console.log(this.name + " is unplugged!");
    this.isPlugged = false;
  }
}

// Прибор 1
class Lamp extends ElectricalAppliance {
  constructor (name, brand, power, bulbType) {
    super(name, power);
    this.brand = brand;
    this.bulbType = bulbType;
    this.isPlugged = true;
  }
}

// Прибор 2
class Computer extends ElectricalAppliance {
  constructor(name, brand, power, type, functionality) {
    super(name, power); 
    this.brand = brand;
    this.type = type;
    this.functionality = functionality;
    this.isPlugged = false;
  }
}

// экземпляр лампы
const tableLamp = new Lamp("Table lamp", "Xiaomi", 5, "LED");

// экземпляр компьютера
const homePC = new Computer("Table PC", "Intel", 120, "stationary", "for work");

// отключить лампу из розетки
tableLamp.unplug();

// включить homePC в розетку
homePC.plugIn();

// результат
console.log(homePC);
console.log(tableLamp);
