function Pribor(name,power){
  this.power = power,
  this.name = name
  console.log( `Создан прибор ${name}, мощность: ${power}` );
}
Pribor.prototype.turnOn = function(){ //функуция включения прибора
    this.turn = true;
}
Pribor.prototype.turnOff = function(){//функция выключения прибора
    this.turn = false;
}
const lump = new Pribor('Lump',20)
const comp = new Pribor('Computer',500)

lump.ilumination = 200;
comp.vCard = 'nVidea';
lump.turnOn();//включение приборов
comp.turnOn();
//lump.turnOff();
//comp.turnOff();

priborCollection = [lump,comp] //массив приборов, для проверки в в цикле, не знаю делают ли так))
//console.log(a)

netPover = 0; //напряжение сети
function netPoverCheck(mas) {
for( let i=0 ;i<2; i++){
  if (mas[i].turn) {
    console.log(mas[i].name + ' включен')
    netPover = netPover + mas[i].power
    
  }else {
    console.log(mas[i].name + ' выключен')
  }
  
 }
console.log('Потребление энергии в сети = '+netPover+ ' W')
}
netPoverCheck(priborCollection);

console.log(priborCollection)// тут покажет все объекты, где мы увидем что у каждого прибора есть собственное свойство

// Есть несколько замечаний по заданию:
// 1. В функциях turnOn и turnOff присутствует аргумент turn, который нигде не используется, так что по сути он избыточный.
// 2. По заданию между приборами и родительским классом должна быть создана делегирующая связь, т.е. лампа и компьютер должна быть отдельными функциями-конструкторами, которые имеют в качестве прототипа Pribor. Сейчас lump и comp являются просто экземплярами Pribor. Ниже приложила верный вариант решения:

function ElectricalAppliance(name, power) {
  this.name = name;
  this.power = power;
  this.isPlugged = false;
}

// метод, который определяет прибор как включенный в розетку
ElectricalAppliance.prototype.plugIn = function () {
  console.log(this.name + " is plugged!");
  this.isPlugged = true;
};

// метод, который определяет прибор как выключеный из розетки
ElectricalAppliance.prototype.unplug = function () {
  console.log(this.name + " is unplugged!");
  this.isPlugged = false;
};

// Прибор 1
function Lamp(name, brand, power, bulbType) {
  this.name = name;
  this.brand = brand;
  this.power = power;
  this.bulbType = bulbType;
  this.isPlugged = true;
}

Lamp.prototype = new ElectricalAppliance();

// Прибор 2
function Computer(name, brand, power, type, functionality) {
  this.name = name;
  this.brand = brand;
  this.power = power;
  this.type = type;
  this.functionality = functionality;
  this.isPlugged = false;
}

Computer.prototype = new ElectricalAppliance();

// экземпляр лампы
const tableLamp = new Lamp("Table lamp", "Xiaomi", 5, "LED");

// экземпляр компьютера
const homePC = new Computer("Table PC", "Intel", 120, "stationary", "for work");

// отключить лампу из розетки
tableLamp.unplug();

// включить homePC в розетку
homePC.plugIn();

// результат
console.log(homePC);
console.log(tableLamp);